{"version":3,"sources":["index.js"],"names":["express","require","mongoose","User","cors","connect","then","Product","console","log","error","message","app","use","json","req","res","newProduct","regeneratorRuntime","async","_context","prev","next","post","body","title","description","rating","price","awrap","save","t0","stop","newUser","_context2","name","email","user","status","listen"],"mappings":"aAAA,IAAMA,QAAUC,QAAQ,WAClBC,SAAWD,QAAQ,YADnBD,KAAOC,QAAU,QAKjBE,KAAOF,QAAQ,0BAHfG,QAAOH,QAAQ,gCAErBC,SAIGG,QAAQ,2CACRC,KAAK,WAJFH,QAAOF,IAAAA,wBADb,MAEMM,SAAAA,GAOFC,QAAQC,IAAIC,EAAMC,WAHlBH,IAAAA,IAAQC,UACTG,IAJHC,IAAAb,QAKSc,QACLN,IAAAA,IAAAA,QAEJI,IAAMA,KAAG,cAAT,SAAAG,EAAAC,GAAA,IAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAF,EAAAC,KAAA,EAEQjB,EAAR,IAAAG,QAAA,CAEIgB,MAAKR,EAAAS,KAATC,MAAwBC,YAAAX,EAAAS,KAAAE,YAAAC,OAAAZ,EAAAS,KAAAG,OAAAC,MAAAb,EAAAS,KAAAI,QAJxBR,EAAAE,KAAA,EAAAJ,mBAAAW,MAIwBZ,EAAAa,QAJxB,KAAA,EAMUb,EAAAA,KAAAA,CAAAA,QAAaA,IANvBG,EAAAE,KAAA,GAAA,MAAA,KAAA,EAAAF,EAAAC,KAAA,EAAAD,EAAAW,GAAAX,EAAA,MAAA,GAQMM,EAAAA,OAAAA,KAAAA,KAAaX,EAAAA,GAAIS,SARvB,KAAA,GAAA,IAAA,MAAA,OAAAJ,EAAAY,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAIwBpB,IAAAW,KAAA,cAAA,SAAAR,EAAAC,GAAA,IAAAiB,EAAA,OAAAf,mBAAAC,MAAA,SAAAe,GAAA,OAAA,OAAAA,EAAAb,KAAAa,EAAAZ,MAAA,KAAA,EAAA,OAAAY,EAAAb,KAAA,EAkBdY,EAAU,IAAI9B,KAAK,CAlBLgC,KAAApB,EAAAS,KAAAW,KAUpBnB,MAAIF,EAAJU,KAASY,MAAE7B,KAAAA,EAAAA,KAASU,OAVAiB,EAAAZ,KAAA,EAAAJ,mBAAAW,MAAAI,EAAAH,QAAA,KAAA,EAAAd,EAAAF,KAAA,CAAAuB,KAAAJ,IAAAC,EAAAZ,KAAA,GAAA,MAAA,KAAA,EAAAY,EAAAb,KAAA,EAAAa,EAAAH,GAAAG,EAAA,MAAA,GAAAlB,EAAAsB,OAAA,KAAAxB,KAAAoB,EAAAH,GAAApB,SAAA,KAAA,GAAA,IAAA,MAAA,OAAAuB,EAAAF,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAyJxBpB,IAAA2B,OAAA,IAAA,WACA/B,QAAAC,IAAA","file":"index.min.js","sourcesContent":["const express = require(\"express\");\r\nconst mongoose = require(\"mongoose\");\r\nconst cors = require(\"cors\");\r\n// const User = require('./models/todos/user.models.js')\r\n// const Orders = require('./models/ecommerce/order.models.js')\r\nconst User = require(\"./models/users/user.js\");\r\nconst Product = require(\"./models/products/product.js\");\r\nmongoose\r\n  .connect(\"mongodb://localhost:27017/DataModelling\")\r\n  .then(() => {\r\n    console.log(\"Database connected\");\r\n  })\r\n  .catch((error) => {\r\n    console.log(error.message);\r\n  });\r\nconst app = express();\r\napp.use(express.json());\r\napp.use(cors());\r\n\r\napp.post(\"/createprod\", async (req, res) => {\r\n  try {\r\n    const newProduct = new Product({\r\n      title: req.body.title,\r\n      description: req.body.description,\r\n      rating: req.body.rating,\r\n      price: req.body.price,\r\n    });\r\n\r\n    await newProduct.save();\r\n    res.json({ Product: newProduct });\r\n  } catch (err) {\r\n    res.status(500).json(err.message);\r\n  }\r\n});\r\n\r\napp.post(\"/createuser\", async(req, res) => {\r\n  try {\r\n    const newUser = new User({\r\n        name:req.body.name,\r\n        email:req.body.email,\r\n        phno:req.body.phno\r\n    })\r\n    await newUser.save()\r\n    res.json({user:newUser})\r\n  } catch (err) {\r\n    res.status(500).json(err.message);\r\n  }\r\n});\r\n// app.post('/', async(req,res)=>{\r\n//     try {\r\n// const iterations = 10\r\n// for(let i=0; i<=5;i++){\r\n//     await User.create({\r\n//         firstName:req.body.firstName,\r\n//         lastName:req.body.lastName,\r\n//         age:i,\r\n//         gender:req.body.gender,\r\n//         // email:req.body.email,\r\n//         phone:req.body.phone,\r\n//         // username:req.body.username,\r\n//         password:req.body.password,\r\n//         height:req.body.height,\r\n//         weight:req.body.weight,\r\n//         eyeColor:req.body.eyeColor\r\n//     })\r\n// }\r\n// res.status(201).json({message:\"Created\", user:newUser})\r\n\r\n// const iterations = 10\r\n// for(let i=0; i<=iterations;i++){\r\n//     await Orders.create({\r\n\r\n//         // orderItems,\r\n//         // address,\r\n//         orderPrice:Math.floor(Math.random()*100)\r\n//     })\r\n// }\r\n// res.json()\r\n\r\n//     } catch (error) {\r\n//         res.json({message:error.message})\r\n//     }\r\n// })\r\n// app.post('/', async(req,res)=>{\r\n//     try {\r\n//         const orderDetails = new Orders({\r\n//             orderPrice:req.body.orderPrice,\r\n//             address:req.body.address,\r\n//             // status:req.body.status,\r\n//         })\r\n//         // orderDetails.customer.push(customerId)\r\n//         await orderDetails.save()\r\n//         res.json({message:\"Order created\", order:orderDetails})\r\n//     } catch (error) {\r\n//         res.status(500).json({message:\"Internal server error\", error:error.message})\r\n//     }\r\n// })\r\n// app.put('/put/:id/:customerId', async(req,res)=>{\r\n//     try {\r\n//         const {id, customerId} = req.params\r\n//         const order = await Orders.findOneAndUpdate({_id:id},{$push:{customer:req.params.customerId}})\r\n//         res.json({message:\"ADDED\"})\r\n//     } catch (error) {\r\n//         res.json({message:\"Internal server Error\", error:error.message})\r\n//     }\r\n// })\r\n// app.get('/orders', async(req,res)=>{\r\n//     try {\r\n//         const orders = await Orders.find().populate('customer')\r\n//         res.json({orders:orders})\r\n//     } catch (error) {\r\n\r\n//     }\r\n// })\r\n// app.get('/aggr', async(req,res)=>{\r\n//     try {\r\n// const aggregate = await Orders.aggregate([\r\n//     {$match:{orderPrice:{$gt:1000}}},\r\n//     {$group:{\r\n//         _id:null,\r\n//         avgPrice:{$avg:'$orderPrice'},\r\n//         minPrice:{$min:'$orderPrice'},\r\n//         maxPrice:{$max:'$orderPrice'},\r\n//         totalPrice:{$sum:'$orderPrice'},\r\n//         orderCount:{$sum:1}\r\n\r\n//     }},\r\n//     {$sort:{minPrice:1}},\r\n//     {$match:{maxPrice:{$lt:10000}}}\r\n// ])\r\n// const aggregate = await Orders.aggregate([\r\n//     {$unwind:'$customer'},\r\n//     {$group:{\r\n//         _id:\"$customer\",\r\n//         AllCustomers:{$sum:1},\r\n//         orderDetails:{$push:'$orderPrice'}\r\n//     }},\r\n//     // {$addFields:{billerAddress:\"$address\"}}\r\n//     {$project:{\r\n//         _id:1,\r\n//         AllCustomers:1,\r\n//         orderDetails:1\r\n//     }},\r\n//     {$sort:{_id:1}},\r\n//     {$limit:6}\r\n\r\n// ])\r\n// res.json({message:aggregate, count:aggregate.length})\r\n//     } catch (error) {\r\n\r\n//     }\r\n// })\r\n// app.get('/get', async(req,res)=>{\r\n//    try {\r\n// const user = await User.find().where('username').eq('guruprasad')\r\n// if(!user){\r\n//     throw new Error(\"Error while fetching or No users available\")\r\n// }\r\n// else{\r\n//     return res.json({message:\"User fetched\",user:user})\r\n// }\r\n// const {username} = req.body\r\n// const doc = await User.replaceOne({username:username}, {password:\"12345667888\"})\r\n\r\n// res.json({User:doc})\r\n// const query = User.findOne({username:\"guruprasad\"})\r\n// query.select('username')\r\n// const person = await query.exec();\r\n// console.log(person.username)\r\n// res.json({email:person})\r\n\r\n// const user = await User.find({_id:'668faba9f10aecaccf501ea7'})\r\n//                         .where(\"lastName\")\r\n//                         .eq('Prasad')\r\n//                         .where(\"height\").gt(2).lt(10)\r\n\r\n// const user = await User.find().sort({firstName:1})\r\n// const user = await User.find().limit(1).select('-password -email')\r\n// for await(const doc of User.find()){\r\n//     res.json({message:\"Queried\", user:doc})\r\n// }\r\n// res.json({message:\"Queried\", user:user})\r\n//    } catch (error) {\r\n//     res.json({message:\"Internal server error\", error:error.message})\r\n//    }\r\n// })\r\n// app.all('*', (req,res,next)=>{\r\n//     // res.status(404).json({\r\n//     //     status:'fail',\r\n//     //     message:`Can't find ${req.originalUrl} on the server`\r\n//     // })\r\n//     const err = new Error(`Can't find ${req.originalUrl} on the server`)\r\n//     err.status = 'fail',\r\n//     err.statusCode = 404\r\n//     next(err)\r\n// })\r\n// app.use((error, req,res, next)=>{\r\n//     error.statusCode = error.statusCode || 500;\r\n//     error.status = error.status || 'error'\r\n//     res.status(error.statusCode).json({\r\n//         status:error.statusCode,\r\n//         message:error.message\r\n//     })\r\n// })\r\n\r\napp.listen(8000, () => {\r\n  console.log(\"Running\");\r\n});\r\n"]}