{"version":3,"sources":["index.js"],"names":["express","require","mongoose","cors","User","Orders","connect","then","console","log","error","message","app","use","json","post","req","res","orderDetails","orderPrice","body","address","save","order","status","put","params","id","customerId","findOneAndUpdate","_id","$push","customer","get","find","populate","orders","user","listen"],"mappings":"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","sourcesContent":["const express = require('express')\r\nconst mongoose = require('mongoose')\r\nconst cors = require('cors')\r\nconst User = require('./models/todos/user.models.js')\r\nconst Orders = require('./models/ecommerce/order.models.js')\r\n\r\nmongoose.connect('mongodb://localhost:27017/DataModelling')\r\n.then(()=>{\r\n    console.log('Database connected')\r\n})\r\n.catch((error)=>{\r\n    console.log(error.message)\r\n})\r\nconst app = express()\r\napp.use(express.json());\r\napp.use(cors())\r\n\r\n// app.post('/', async(req,res)=>{\r\n//     try {\r\n        // const iterations = 10\r\n        // for(let i=0; i<=5;i++){\r\n        //     await User.create({\r\n        //         firstName:req.body.firstName,\r\n        //         lastName:req.body.lastName,\r\n        //         age:i,\r\n        //         gender:req.body.gender,\r\n        //         // email:req.body.email,\r\n        //         phone:req.body.phone,\r\n        //         // username:req.body.username,\r\n        //         password:req.body.password,\r\n        //         height:req.body.height,\r\n        //         weight:req.body.weight,\r\n        //         eyeColor:req.body.eyeColor\r\n        //     })\r\n        // }\r\n        // res.status(201).json({message:\"Created\", user:newUser})\r\n        \r\n        // const iterations = 10\r\n        // for(let i=0; i<=iterations;i++){\r\n        //     await Orders.create({\r\n               \r\n        //         // orderItems,\r\n        //         // address,\r\n        //         orderPrice:Math.floor(Math.random()*100)\r\n        //     })\r\n        // }\r\n        // res.json()\r\n\r\n//     } catch (error) {\r\n//         res.json({message:error.message})\r\n//     }\r\n// })\r\napp.post('/', async(req,res)=>{\r\n    try {\r\n        const orderDetails = new Orders({\r\n            orderPrice:req.body.orderPrice,\r\n            address:req.body.address,\r\n            // status:req.body.status,\r\n        })\r\n        // orderDetails.customer.push(customerId)\r\n        await orderDetails.save()\r\n        res.json({message:\"Order created\", order:orderDetails})\r\n    } catch (error) {\r\n        res.status(500).json({message:\"Internal server error\", error:error.message})\r\n    }\r\n})\r\napp.put('/put/:id/:customerId', async(req,res)=>{\r\n    try {\r\n        const {id, customerId} = req.params\r\n        const order = await Orders.findOneAndUpdate({_id:id},{$push:{customer:req.params.customerId}})\r\n        res.json({message:\"ADDED\"})\r\n    } catch (error) {\r\n        res.json({message:\"Internal server Error\", error:error.message})\r\n    }\r\n})\r\napp.get('/orders', async(req,res)=>{\r\n    try {\r\n        const orders = await Orders.find().populate('customer')\r\n        res.json({orders:orders})\r\n    } catch (error) {\r\n        \r\n    }\r\n})\r\napp.get('/get', async(req,res)=>{\r\n   try {\r\n    // const user = await User.find().where('username').eq('guruprasad')\r\n    // if(!user){\r\n    //     throw new Error(\"Error while fetching or No users available\")\r\n    // }\r\n    // else{\r\n    //     return res.json({message:\"User fetched\",user:user})\r\n    // }\r\n    // const {username} = req.body\r\n    // const doc = await User.replaceOne({username:username}, {password:\"12345667888\"})\r\n    \r\n    // res.json({User:doc})\r\n    // const query = User.findOne({username:\"guruprasad\"})\r\n    // query.select('username')\r\n    // const person = await query.exec();\r\n    // console.log(person.username)\r\n    // res.json({email:person})\r\n\r\n    // const user = await User.find({_id:'668faba9f10aecaccf501ea7'})\r\n    //                         .where(\"lastName\")\r\n    //                         .eq('Prasad')\r\n    //                         .where(\"height\").gt(2).lt(10)\r\n                            \r\n                         \r\n    // const user = await User.find().sort({firstName:1})\r\n    // const user = await User.find().limit(1).select('-password -email')\r\n    // for await(const doc of User.find()){\r\n    //     res.json({message:\"Queried\", user:doc})\r\n    // }\r\n    res.json({message:\"Queried\", user:user})\r\n   } catch (error) {\r\n    res.json({message:\"Internal server error\", error:error.message})\r\n   }\r\n})\r\n\r\napp.listen(8000,()=>{\r\n    console.log(\"Running\")\r\n})"],"file":"index.dev.js"}